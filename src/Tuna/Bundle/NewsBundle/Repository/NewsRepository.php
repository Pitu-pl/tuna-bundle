<?php

namespace TheCodeine\NewsBundle\Repository;

use Doctrine\ORM\EntityRepository;
use TheCodeine\NewsBundle\Entity\News;

/**
 * NewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsRepository extends EntityRepository
{
    public function getListQuery($published = null)
    {
        $query = $this->createQueryBuilder('p')->orderBy('p.createdAt', 'DESC');

        if ($published !== null) {
            $query->andWhere('p.published = 1');
        }

        return $query->getQuery();
    }

    public function getItemsForTag($tag)
    {
        if (!$tag) {
            return false;
        }

        $query = $this->createQueryBuilder('p')
            ->leftJoin('p.tags', 'tag')
            ->where('p.published=1')
            ->orderBy('p.createdAt', 'DESC');

        if (is_string($tag)) {
            $query->andWhere('tag.name = :tag')
                ->setParameter('tag', $tag);
        } else {
            $query->andWhere('tag = :tag')
                ->setParameter('tag', $tag);
        }

        return $query->getQuery()
            ->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
            ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_INNER_JOIN, true);
    }

    public function getSimilar(News $news)
    {
        $tagNames = array();
        foreach ($news->getTags() as $tag) {
            $tagNames[] = $tag->getName();
        }

        $query = $this->createQueryBuilder('p')
            ->leftJoin('p.tags', 'tag')
            ->where('p.published=1')
            ->andWhere('p.id != :article_id')
            ->setParameter('article_id', $news->getId())
            ->orderBy('p.createdAt', 'DESC')
            ->setMaxResults(2);

        if (count($tagNames) > 0) {
            $query->andWhere($query->expr()->in('tag.name', $tagNames));
        }

        return $query
            ->getQuery()
            ->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
            ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_INNER_JOIN, true)
            ->getResult();
    }

    public function getLatestItems($limit = 3)
    {
        $query = $this->createQueryBuilder('t')
            ->where('t.published=1')
            ->orderBy('t.createdAt', 'DESC')
            ->setMaxResults($limit);

        return $query->getQuery()
            ->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
            ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_INNER_JOIN, true)
            ->getResult();
    }

    public function getSingleNews($slug)
    {
        $qb = $this->createQueryBuilder('n')
            ->andWhere('n.slug = :slug')
            ->setParameter('slug', $slug)
            ->setMaxResults(1);

        return $qb
            ->getQuery()
            ->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker')
            ->setHint(\Gedmo\Translatable\TranslatableListener::HINT_INNER_JOIN, true)
            ->getResult();
    }
}
